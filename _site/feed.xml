<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2018-04-21T04:11:24-05:00</updated><id>http://0.0.0.0:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Eye of God</title><link href="http://0.0.0.0:4000/math/2016/07/03/eye-of-god.html" rel="alternate" type="text/html" title="Eye of God" /><published>2016-07-03T00:00:00-05:00</published><updated>2016-07-03T00:00:00-05:00</updated><id>http://0.0.0.0:4000/math/2016/07/03/eye-of-god</id><content type="html" xml:base="http://0.0.0.0:4000/math/2016/07/03/eye-of-god.html">&lt;p&gt;&lt;img src=&quot;/assets/images/eye.jpg&quot; alt=&quot;Eye of God&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I was fascinated by the curve generated using golden ratio.
Just to get an intuition of the golden ratio let’s consider the following image.&lt;/p&gt;

&lt;svg width=&quot;400&quot; height=&quot;40&quot;&gt;
	&lt;line x1=&quot;0&quot; y1=&quot;10&quot; x2=&quot;400&quot; y2=&quot;10&quot; style=&quot;stroke:black;stroke-width:2&quot; /&gt;
	&lt;line x1=&quot;1&quot; y1=&quot;6&quot; x2=&quot;1&quot; y2=&quot;14&quot; style=&quot;stroke:black;stroke-width:2&quot; /&gt;
	&lt;line x1=&quot;399&quot; y1=&quot;6&quot; x2=&quot;399&quot; y2=&quot;14&quot; style=&quot;stroke:black;stroke-width:2&quot; /&gt;
	&lt;line x1=&quot;247&quot; y1=&quot;6&quot; x2=&quot;247&quot; y2=&quot;14&quot; style=&quot;stroke:black;stroke-width:2&quot; /&gt;
	&lt;text x=&quot;123&quot; y=&quot;30&quot; fill=&quot;black&quot; font-family=&quot;Arial&quot; style=&quot;text-anchor: middle&quot;&gt;x&lt;/text&gt;
	&lt;text x=&quot;323&quot; y=&quot;30&quot; fill=&quot;black&quot; font-family=&quot;Arial&quot; style=&quot;text-anchor: middle&quot;&gt;1 - x&lt;/text&gt;
&lt;/svg&gt;

&lt;p&gt;We have sections of the length &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 - x)&lt;/code&gt; so that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{x \over 1 - x} = {1 \over x}, x &gt; 0&lt;/script&gt;

&lt;p&gt;From here we find&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x = {\sqrt{5} - 1 \over 2}.&lt;/script&gt;

&lt;p&gt;Now let’s consider a rectangle with sides &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, if we cut a square of side &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 
we get another rectangle with the same ratio of sides because of the first equation.
And if we draw a quarter of a circle in each square we’ll get this beautiful picture.&lt;/p&gt;

&lt;canvas id=&quot;canvas&quot; width=&quot;700&quot; height=&quot;450&quot;&gt;
&lt;/canvas&gt;

&lt;p&gt;(Disclaimer: the image is generated by JavaScript right now, browser compatibility was not considered)&lt;/p&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;script&gt;

function Point(x, y) {
  return {
    x: x,
    y: y
  }
}

var phi = (Math.sqrt(5.0) - 1.0) / 2.0;
var width = 700;
var height = phi * width;
var origin = new Point((700 - width) / 2, (450 - height) / 2);

/**
* Computes golden section
*/
function gs(p1, p2) {
  return new Point(p1.x + (p2.x - p1.x) * phi, p1.y + (p2.y - p1.y) * phi);
}


function draw(ctx, a, b, c, d, depth) {
  if (depth &gt; 15) {
    return;
  }

  ctx.moveTo(a.x, a.y);
  ctx.lineTo(b.x, b.y);
  ctx.lineTo(c.x, c.y);
  ctx.lineTo(d.x, d.y);
  ctx.lineTo(a.x, a.y);
  ctx.strokeStyle = '#dfdfdf';
  ctx.stroke();

  var a1 = gs(b, c);
  var d1 = gs(a, d);

  var r = (height * Math.pow(phi, depth));
  ctx.beginPath();
  ctx.arc(d1.x, d1.y, r, - Math.PI + (Math.PI / 2) * depth, - Math.PI / 2  + (Math.PI / 2) * depth);
  ctx.strokeStyle = '#000000';
  ctx.lineWidth = .5;
  ctx.stroke();

  ctx.moveTo(b.x, b.y);
  ctx.lineTo(d.x, d.y);
  ctx.strokeStyle = '#dfdfdf';
  ctx.stroke();

  draw(ctx, a1, c, d, d1, depth + 1);


}

document.addEventListener(&quot;DOMContentLoaded&quot;, function(event) { 
  var ctx = document.getElementById(&quot;canvas&quot;).getContext(&quot;2d&quot;);
  ctx.imageSmoothingEnabled = false;
  var a = new Point(origin.x, origin.y + height);
  var b = new Point(origin.x, origin.y);
  var c = new Point(origin.x + width, origin.y);
  var d = new Point(origin.x + width, origin.y + height);

  draw(ctx, a, b, c, d, 0);

});

&lt;/script&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Hello LED matrix display</title><link href="http://0.0.0.0:4000/arduino/2016/06/18/led-matrix-display.html" rel="alternate" type="text/html" title="Hello LED matrix display" /><published>2016-06-18T00:00:00-05:00</published><updated>2016-06-18T00:00:00-05:00</updated><id>http://0.0.0.0:4000/arduino/2016/06/18/led-matrix-display</id><content type="html" xml:base="http://0.0.0.0:4000/arduino/2016/06/18/led-matrix-display.html">&lt;p&gt;In this article I’ll show how to use LED matrix display with Arduino UNO.
We’ll see how to control single pixel and implement 
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Game_of_Life&quot;&gt;the game of life&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;table&gt;
	&lt;thead&gt;
		&lt;tr style=&quot;text-align: center;&quot;&gt;
			&lt;td&gt;Arduino UNO&lt;/td&gt;
			&lt;td&gt;8x8 LED matrix display&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;		
		&lt;tr&gt;
			&lt;td&gt;
				&lt;img src=&quot;/assets/images/arduino_uno_min.jpg&quot; /&gt;				
			&lt;/td&gt;
			&lt;td&gt;
				&lt;img src=&quot;/assets/images/led_matrix_min.jpg&quot; /&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;We are going to use a module with 8x8 matrix display and MAX7219CNG display driver 
to reduce number of pins and simplify control.&lt;/p&gt;

&lt;p&gt;We’ll include a library&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:::c
#include &amp;lt;LedControl.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pin numbers we are going to use are described in code below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:::c
#define CLK 8
#define CS  9
#define DIN 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;controlling-single-pixel&quot;&gt;Controlling single pixel&lt;/h2&gt;
&lt;p&gt;Let’s look at the whole sketch which lights one pixel&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:::c
#include &amp;lt;LedControl.h&amp;gt;

#define CLK 8
#define CS  9
#define DIN 10

LedControl lc = LedControl(DIN, CLK, CS, 1 /* number of displays attached */);

#define DISPLAY_INDEX 0

void setup() {  
  lc.shutdown(DISPLAY_INDEX, false);
  lc.setIntensity(DISPLAY_INDEX, 8);
  lc.setLed(DISPLAY_INDEX, 3/*X*/, 4/*Y*/, 1/*HIGH*/);
}

void loop() {
}	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Final result should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pixel_control.jpg&quot; alt=&quot;Final result&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-game-of-life&quot;&gt;The Game of Life&lt;/h2&gt;
&lt;p&gt;Now let’s do something more interesting and implement &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Game_of_Life&quot;&gt;the game of life&lt;/a&gt;.
The source code can be found &lt;a href=&quot;https://github.com/zjor/arduino/blob/master/the_game_of_life/the_game_of_life.ino&quot;&gt;here&lt;/a&gt;.
There are several configurations changing one another thus forming beautiful animation like on the video below.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mDUbzU1nA8Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">In this article I’ll show how to use LED matrix display with Arduino UNO. We’ll see how to control single pixel and implement the game of life.</summary></entry><entry><title type="html">The Snake Game</title><link href="http://0.0.0.0:4000/arduino/2016/06/14/snake-game.html" rel="alternate" type="text/html" title="The Snake Game" /><published>2016-06-14T00:00:00-05:00</published><updated>2016-06-14T00:00:00-05:00</updated><id>http://0.0.0.0:4000/arduino/2016/06/14/snake-game</id><content type="html" xml:base="http://0.0.0.0:4000/arduino/2016/06/14/snake-game.html">&lt;p&gt;This time we’ll create somthing more interactive.&lt;/p&gt;

&lt;p&gt;We’ll use the following items:&lt;/p&gt;

&lt;table&gt;
	&lt;thead&gt;
		&lt;tr style=&quot;text-align: center;&quot;&gt;
			&lt;td&gt;Arduino UNO&lt;/td&gt;
			&lt;td&gt;8x8 LED matrix&lt;/td&gt;
			&lt;td&gt;Joystick&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;		
		&lt;tr&gt;
			&lt;td&gt;
				&lt;img src=&quot;/assets/images/arduino_uno_min.jpg&quot; /&gt;				
			&lt;/td&gt;
			&lt;td&gt;
				&lt;img src=&quot;/assets/images/led_matrix_min.jpg&quot; /&gt;
			&lt;/td&gt;
			&lt;td&gt;
				&lt;img src=&quot;/assets/images/joystick_min.jpg&quot; /&gt;
			&lt;/td&gt;			
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Eventually my little monster looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/snake.jpg&quot; alt=&quot;Snake&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wiring should be clear from the source code listed below, also available &lt;a href=&quot;https://github.com/zjor/arduino/blob/master/snake/arduino/snake/snake.ino&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:::c
/**
 * Snake
 * Implementation of the classical Snake game 
 * where the snake moved constantly and the player
 * have to avoid intersections with itself and borders.
 * When the snake eats food it grows and speeds up a little bit.
 * 
 * 23 Jun 2016
 * by Sergey Royz
 */
 
#include &amp;lt;LedControl.h&amp;gt;

/* Joystick PINs */
#define VRX     A0
#define VRY     A1
#define SW      2

/* Display PINs */
#define CLK     8
#define CS      9
#define DIN     10

#define SIZE    8
#define ADVANCE_DELAY 20

int snake[SIZE*SIZE][2];
int length;
int food[2], v[2];
bool is_game_over = false;
long current_time;
long prev_advance;
int blink_count;

LedControl lc = LedControl(DIN, CLK, CS, 1);

void init_game() {
  prev_advance = current_time = 0;
  blink_count = 3;
  int half = SIZE / 2;
  length = SIZE / 3;

  for (int i = 0; i &amp;lt; length; i++) {
      snake[i][0] = half - 1;
      snake[i][1] = half + i;
  }

  food[0] = half + 1;
  food[1] = half - 1;

  v[0] = 0;
  v[1] = -1;
}

void render() {
  for (int i = 0; i &amp;lt; length; i++) {
    lc.setLed(0, snake[i][0], snake[i][1], 1);
  }
  lc.setLed(0, food[0], food[1], 1);
}

void clearScreen() {
  for (int x = 0; x &amp;lt; SIZE; x++) {
    for (int y = 0; y &amp;lt; SIZE; y++) {
      lc.setLed(0, x, y, 0);
    }
  }
}

/**
 * moves the snake forward
 * returns true if the game is over
 */
bool advance() {
  int head[2] = {snake[0][0] + v[0], snake[0][1] + v[1]};

  if (head[0] &amp;lt; 0 || head[0] &amp;gt;= SIZE) {
      return true;
  }
  
  if (head[1] &amp;lt; 0 || head[1] &amp;gt;= SIZE) {
      return true;
  }
  
  for (int i = 0; i &amp;lt; length; i++) {
      if (snake[i][0] == head[0] &amp;amp;&amp;amp; snake[i][1] == head[1]) {
          return true;
      }
  }
  
  bool grow = (head[0] == food[0] &amp;amp;&amp;amp; head[1] == food[1]);
  if (grow) {
      length++;  
      randomSeed(current_time);    
      food[0] = random(SIZE);
      food[1] = random(SIZE);
  }
  
  for (int i = length - 1; i &amp;gt;= 0; i--) {
      snake[i + 1][0] = snake[i][0];
      snake[i + 1][1] = snake[i][1];
  }
  snake[0][0] += v[0];
  snake[0][1] += v[1];
  return false;
}

void setup() {
  pinMode(SW, INPUT_PULLUP);
  pinMode(VRX, INPUT);
  pinMode(VRY, INPUT);
  attachInterrupt(digitalPinToInterrupt(SW), restart, RISING);

  lc.shutdown(0, false);
  lc.setIntensity(0, 8);

  init_game();
  render();
}

void loop() {
  if (!is_game_over) {
    clearScreen();
    render();
    if (current_time - prev_advance &amp;gt; ADVANCE_DELAY) {
      is_game_over = advance();
      prev_advance = current_time;    
    }
  } else {
    while (blink_count &amp;gt; 0) {
      clearScreen();
      delay(300);
      render();
      delay(300);
      blink_count--;      
    }
  }
  readControls();
  current_time++;
}

void restart() {  
  init_game();
  is_game_over = false;
}

void readControls() {
  int dx = map(analogRead(VRX), 0, 906, 2, -2);
  int dy = map(analogRead(VRY), 0, 906, -2, 2);
  if (dx != 0) {dx = dx / abs(dx);}
  if (dy != 0) {dy = dy / abs(dy);}

  if (dy != 0 &amp;amp;&amp;amp; v[0] != 0) {
    v[0] = 0;
    v[1] = dy;    
  }

  if (dx != 0 &amp;amp;&amp;amp; v[1] != 0) {
    v[0] = dx;
    v[1] = 0;
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bKMDyU7dsYs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">This time we’ll create somthing more interactive.</summary></entry></feed>